import { NextResponse } from 'next/server'

export const runtime = 'nodejs'         // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º Node.js
export const dynamic = 'force-dynamic'  // –Ω–µ –∫—ç—à–∏—Ä—É–µ–º –∏ –Ω–µ —Å—Ç–∞—Ç–∏–∑–∏—Ä—É–µ–º

type Payload = {
  name: string
  phone: string
  message?: string
  source?: string
}

export async function POST(req: Request) {
  try {
    const body = (await req.json()) as Payload

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const token =
      process.env.TELEGRAM_BOT_TOKEN || process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN /* –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫ */
    const chatId =
      process.env.TELEGRAM_CHAT_ID || process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID     /* –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫ */

    if (!token || !chatId) {
      console.error('[consultation] Telegram not configured: missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID')
      return NextResponse.json(
        { error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', code: 'TELEGRAM_NOT_CONFIGURED' },
        { status: 500 }
      )
    }

    const text = [
      'üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
      `üë§ –ò–º—è: ${body.name}`,
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}`,
      body.message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${body.message}` : undefined,
      body.source ? `üîñ –ò—Å—Ç–æ—á–Ω–∏–∫: ${body.source}` : undefined
    ]
      .filter(Boolean)
      .join('\n')

    const tgResponse = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text
        // parse_mode: 'HTML' // –µ—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞—Ö–æ—á–µ—à—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –Ω–µ –∑–∞–±—É–¥—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
      })
    })

    if (!tgResponse.ok) {
      const detail = await tgResponse.text().catch(() => '')
      console.error('[consultation] Telegram API error:', tgResponse.status, detail)
      return NextResponse.json(
        { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram' },
        { status: 500 }
      )
    }

    return NextResponse.json({ success: true })
  } catch (err) {
    console.error('[consultation] Server error:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
