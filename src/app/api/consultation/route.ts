import { NextResponse } from 'next/server'

export async function POST(req: Request) {
  try {
    const body: { name: string; phone: string; message?: string } = await req.json()

    const token = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!token || !chatId) {
      console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã')
      return NextResponse.json({ error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }, { status: 500 })
    }

    const text =
      `üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n` +
      `üë§ –ò–º—è: ${body.name}\n` +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}\n` +
      (body.message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${body.message}` : '')

    const tgResponse = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    })

    if (!tgResponse.ok) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', await tgResponse.text())
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram' }, { status: 500 })
    }

    return NextResponse.json({ success: true })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err)
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
